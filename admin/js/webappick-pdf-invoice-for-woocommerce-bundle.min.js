"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}!function(t,e){"object"==("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?e(exports,require("jquery")):"function"==typeof define&&define.amd?define(["exports","jquery"],e):e(t.bootstrap={},t.jQuery)}(void 0,function(t,h){function j(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function e(t,e,n){e&&j(t.prototype,e),n&&j(t,n)}function r(i){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{},e=Object.keys(o);(e="function"==typeof Object.getOwnPropertySymbols?e.concat(Object.getOwnPropertySymbols(o).filter(function(t){return Object.getOwnPropertyDescriptor(o,t).enumerable})):e).forEach(function(t){var e=i,n=o[t=t];t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n})}return i}h=h&&h.hasOwnProperty("default")?h.default:h;var R="transitionend";var u={TRANSITION_END:"bsTransitionEnd",getUID:function(t){for(;t+=~~(1e6*Math.random()),document.getElementById(t););return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");return(e=e&&"#"!==e?e:(t=t.getAttribute("href"))&&"#"!==t?t.trim():"")&&document.querySelector(e)?e:null},getTransitionDurationFromElement:function(t){var e,n,i;return t&&(e=h(t).css("transition-duration"),t=h(t).css("transition-delay"),n=parseFloat(e),i=parseFloat(t),n||i)?(e=e.split(",")[0],t=t.split(",")[0],1e3*(parseFloat(e)+parseFloat(t))):0},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(t){h(t).trigger(R)},supportsTransitionEnd:function(){return Boolean(R)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var o=n[i],r=e[i],r=r&&u.isElement(r)?"element":{}.toString.call(r).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(o).test(r))throw new Error(t.toUpperCase()+': Option "'+i+'" provided type "'+r+'" but expected type "'+o+'".')}},findShadowRoot:function(t){return document.documentElement.attachShadow?"function"!=typeof t.getRootNode?t instanceof ShadowRoot?t:t.parentNode?u.findShadowRoot(t.parentNode):null:(t=t.getRootNode())instanceof ShadowRoot?t:null:null}},F=(h.fn.emulateTransitionEnd=function(t){var e=this,n=!1;return h(this).one(u.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||u.triggerTransitionEnd(e)},t),this},h.event.special[u.TRANSITION_END]={bindType:R,delegateType:R,handle:function(t){if(h(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}},"alert"),M="bs.alert",n="."+M,W=h.fn[F],U={CLOSE:"close"+n,CLOSED:"closed"+n,CLICK_DATA_API:"click"+n+".data-api"},i=((n=o.prototype).close=function(t){var e=this._element;t&&(e=this._getRootElement(t)),this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)},n.dispose=function(){h.removeData(this._element,M),this._element=null},n._getRootElement=function(t){var e=u.getSelectorFromElement(t),n=!1;return n=(n=e?document.querySelector(e):n)||h(t).closest(".alert")[0]},n._triggerCloseEvent=function(t){var e=h.Event(U.CLOSE);return h(t).trigger(e),e},n._removeElement=function(e){var t,n=this;h(e).removeClass("show"),h(e).hasClass("fade")?(t=u.getTransitionDurationFromElement(e),h(e).one(u.TRANSITION_END,function(t){return n._destroyElement(e,t)}).emulateTransitionEnd(t)):this._destroyElement(e)},n._destroyElement=function(t){h(t).detach().trigger(U.CLOSED).remove()},o._jQueryInterface=function(n){return this.each(function(){var t=h(this),e=t.data(M);e||(e=new o(this),t.data(M,e)),"close"===n&&e[n](this)})},o._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},e(o,null,[{key:"VERSION",get:function(){return"4.2.1"}}]),o);function o(t){this._element=t}h(document).on(U.CLICK_DATA_API,'[data-dismiss="alert"]',i._handleDismiss(new i)),h.fn[F]=i._jQueryInterface,h.fn[F].Constructor=i,h.fn[F].noConflict=function(){return h.fn[F]=W,i._jQueryInterface};var B="button",q="bs.button",n="."+q,s=".data-api",K=h.fn[B],Q="active",a='[data-toggle^="button"]',Y=".btn",n={CLICK_DATA_API:"click"+n+s,FOCUS_BLUR_DATA_API:"focus"+n+s+" blur"+n+s},V=((s=X.prototype).toggle=function(){var t=!0,e=!0,n=h(this._element).closest('[data-toggle="buttons"]')[0];if(n){var i,o=this._element.querySelector('input:not([type="hidden"])');if(o){if("radio"===o.type&&(o.checked&&this._element.classList.contains(Q)?t=!1:(i=n.querySelector(".active"))&&h(i).removeClass(Q)),t){if(o.hasAttribute("disabled")||n.hasAttribute("disabled")||o.classList.contains("disabled")||n.classList.contains("disabled"))return;o.checked=!this._element.classList.contains(Q),h(o).trigger("change")}o.focus(),e=!1}}e&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(Q)),t&&h(this._element).toggleClass(Q)},s.dispose=function(){h.removeData(this._element,q),this._element=null},X._jQueryInterface=function(e){return this.each(function(){var t=h(this).data(q);t||(t=new X(this),h(this).data(q,t)),"toggle"===e&&t[e]()})},e(X,null,[{key:"VERSION",get:function(){return"4.2.1"}}]),X);function X(t){this._element=t}h(document).on(n.CLICK_DATA_API,a,function(t){t.preventDefault();t=t.target;h(t).hasClass("btn")||(t=h(t).closest(Y)),V._jQueryInterface.call(h(t),"toggle")}).on(n.FOCUS_BLUR_DATA_API,a,function(t){var e=h(t.target).closest(Y)[0];h(e).toggleClass("focus",/^focus(in)?$/.test(t.type))}),h.fn[B]=V._jQueryInterface,h.fn[B].Constructor=V,h.fn[B].noConflict=function(){return h.fn[B]=K,V._jQueryInterface};var l="carousel",z="bs.carousel",c="."+z,s=".data-api",G=h.fn[l],J={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},Z={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},$="next",tt="prev",f={SLIDE:"slide"+c,SLID:"slid"+c,KEYDOWN:"keydown"+c,MOUSEENTER:"mouseenter"+c,MOUSELEAVE:"mouseleave"+c,TOUCHSTART:"touchstart"+c,TOUCHMOVE:"touchmove"+c,TOUCHEND:"touchend"+c,POINTERDOWN:"pointerdown"+c,POINTERUP:"pointerup"+c,DRAG_START:"dragstart"+c,LOAD_DATA_API:"load"+c+s,CLICK_DATA_API:"click"+c+s},d="active",et=".active.carousel-item",nt={TOUCH:"touch",PEN:"pen"},p=((n=m.prototype).next=function(){this._isSliding||this._slide($)},n.nextWhenVisible=function(){!document.hidden&&h(this._element).is(":visible")&&"hidden"!==h(this._element).css("visibility")&&this.next()},n.prev=function(){this._isSliding||this._slide(tt)},n.pause=function(t){t||(this._isPaused=!0),this._element.querySelector(".carousel-item-next, .carousel-item-prev")&&(u.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},n.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},n.to=function(t){var e=this,n=(this._activeElement=this._element.querySelector(et),this._getItemIndex(this._activeElement));t>this._items.length-1||t<0||(this._isSliding?h(this._element).one(f.SLID,function(){return e.to(t)}):n===t?(this.pause(),this.cycle()):this._slide(n<t?$:tt,this._items[t]))},n.dispose=function(){h(this._element).off(c),h.removeData(this._element,z),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},n._getConfig=function(t){return t=r({},J,t),u.typeCheckConfig(l,t,Z),t},n._handleSwipe=function(){var t=Math.abs(this.touchDeltaX);t<=40||(0<(t=t/this.touchDeltaX)&&this.prev(),t<0&&this.next())},n._addEventListeners=function(){var e=this;this._config.keyboard&&h(this._element).on(f.KEYDOWN,function(t){return e._keydown(t)}),"hover"===this._config.pause&&h(this._element).on(f.MOUSEENTER,function(t){return e.pause(t)}).on(f.MOUSELEAVE,function(t){return e.cycle(t)}),this._addTouchEventListeners()},n._addTouchEventListeners=function(){var t,e,n=this;this._touchSupported&&(t=function(t){n._pointerEvent&&nt[t.originalEvent.pointerType.toUpperCase()]?n.touchStartX=t.originalEvent.clientX:n._pointerEvent||(n.touchStartX=t.originalEvent.touches[0].clientX)},e=function(t){n._pointerEvent&&nt[t.originalEvent.pointerType.toUpperCase()]&&(n.touchDeltaX=t.originalEvent.clientX-n.touchStartX),n._handleSwipe(),"hover"===n._config.pause&&(n.pause(),n.touchTimeout&&clearTimeout(n.touchTimeout),n.touchTimeout=setTimeout(function(t){return n.cycle(t)},500+n._config.interval))},h(this._element.querySelectorAll(".carousel-item img")).on(f.DRAG_START,function(t){return t.preventDefault()}),this._pointerEvent?(h(this._element).on(f.POINTERDOWN,t),h(this._element).on(f.POINTERUP,e),this._element.classList.add("pointer-event")):(h(this._element).on(f.TOUCHSTART,t),h(this._element).on(f.TOUCHMOVE,function(t){(t=t).originalEvent.touches&&1<t.originalEvent.touches.length?n.touchDeltaX=0:n.touchDeltaX=t.originalEvent.touches[0].clientX-n.touchStartX}),h(this._element).on(f.TOUCHEND,e)))},n._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next()}},n._getItemIndex=function(t){return this._items=t&&t.parentNode?[].slice.call(t.parentNode.querySelectorAll(".carousel-item")):[],this._items.indexOf(t)},n._getItemByDirection=function(t,e){var n=t===$,i=t===tt,o=this._getItemIndex(e),r=this._items.length-1;return(i&&0===o||n&&o===r)&&!this._config.wrap?e:-1==(i=(o+(t===tt?-1:1))%this._items.length)?this._items[this._items.length-1]:this._items[i]},n._triggerSlideEvent=function(t,e){var n=this._getItemIndex(t),i=this._getItemIndex(this._element.querySelector(et)),t=h.Event(f.SLIDE,{relatedTarget:t,direction:e,from:i,to:n});return h(this._element).trigger(t),t},n._setActiveIndicatorElement=function(t){var e;this._indicatorsElement&&(e=[].slice.call(this._indicatorsElement.querySelectorAll(".active")),h(e).removeClass(d),e=this._indicatorsElement.children[this._getItemIndex(t)])&&h(e).addClass(d)},n._slide=function(t,e){var n,i,o,r=this,s=this._element.querySelector(et),a=this._getItemIndex(s),l=e||s&&this._getItemByDirection(t,s),e=this._getItemIndex(l),c=Boolean(this._interval),t=t===$?(n="carousel-item-left",i="carousel-item-next","left"):(n="carousel-item-right",i="carousel-item-prev","right");l&&h(l).hasClass(d)?this._isSliding=!1:!this._triggerSlideEvent(l,t).isDefaultPrevented()&&s&&l&&(this._isSliding=!0,c&&this.pause(),this._setActiveIndicatorElement(l),o=h.Event(f.SLID,{relatedTarget:l,direction:t,from:a,to:e}),h(this._element).hasClass("slide")?(h(l).addClass(i),u.reflow(l),h(s).addClass(n),h(l).addClass(n),t=parseInt(l.getAttribute("data-interval"),10),this._config.interval=t?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,t):this._config.defaultInterval||this._config.interval,a=u.getTransitionDurationFromElement(s),h(s).one(u.TRANSITION_END,function(){h(l).removeClass(n+" "+i).addClass(d),h(s).removeClass(d+" "+i+" "+n),r._isSliding=!1,setTimeout(function(){return h(r._element).trigger(o)},0)}).emulateTransitionEnd(a)):(h(s).removeClass(d),h(l).addClass(d),this._isSliding=!1,h(this._element).trigger(o)),c)&&this.cycle()},m._jQueryInterface=function(i){return this.each(function(){var t=h(this).data(z),e=r({},J,h(this).data()),n=("object"==_typeof(i)&&(e=r({},e,i)),"string"==typeof i?i:e.slide);if(t||(t=new m(this,e),h(this).data(z,t)),"number"==typeof i)t.to(i);else if("string"==typeof n){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}else e.interval&&(t.pause(),t.cycle())})},m._dataApiClickHandler=function(t){var e,n,i=u.getSelectorFromElement(this);i&&(i=h(i)[0])&&h(i).hasClass("carousel")&&(e=r({},h(i).data(),h(this).data()),(n=this.getAttribute("data-slide-to"))&&(e.interval=!1),m._jQueryInterface.call(h(i),e),n&&h(i).data(z).to(n),t.preventDefault())},e(m,null,[{key:"VERSION",get:function(){return"4.2.1"}},{key:"Default",get:function(){return J}}]),m);function m(t,e){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(e),this._element=t,this._indicatorsElement=this._element.querySelector(".carousel-indicators"),this._touchSupported="ontouchstart"in document.documentElement||0<navigator.maxTouchPoints,this._pointerEvent=Boolean(window.PointerEvent||window.MSPointerEvent),this._addEventListeners()}h(document).on(f.CLICK_DATA_API,"[data-slide], [data-slide-to]",p._dataApiClickHandler),h(window).on(f.LOAD_DATA_API,function(){for(var t=[].slice.call(document.querySelectorAll('[data-ride="carousel"]')),e=0,n=t.length;e<n;e++){var i=h(t[e]);p._jQueryInterface.call(i,i.data())}}),h.fn[l]=p._jQueryInterface,h.fn[l].Constructor=p,h.fn[l].noConflict=function(){return h.fn[l]=G,p._jQueryInterface};var g="collapse",_="bs.collapse",a="."+_,it=h.fn[g],ot={toggle:!0,parent:""},rt={toggle:"boolean",parent:"(string|element)"},st={SHOW:"show"+a,SHOWN:"shown"+a,HIDE:"hide"+a,HIDDEN:"hidden"+a,CLICK_DATA_API:"click"+a+".data-api"},v="show",at="collapse",lt="collapsing",ct="collapsed",ht='[data-toggle="collapse"]',ut=((s=y.prototype).toggle=function(){h(this._element).hasClass(v)?this.hide():this.show()},s.show=function(){var t,e,n,i,o=this;this._isTransitioning||h(this._element).hasClass(v)||(t=this._parent&&0===(t=[].slice.call(this._parent.querySelectorAll(".show, .collapsing")).filter(function(t){return"string"==typeof o._config.parent?t.getAttribute("data-parent")===o._config.parent:t.classList.contains(at)})).length?null:t)&&(i=h(t).not(this._selector).data(_))&&i._isTransitioning||(n=h.Event(st.SHOW),h(this._element).trigger(n),n.isDefaultPrevented()||(t&&(y._jQueryInterface.call(h(t).not(this._selector),"hide"),i||h(t).data(_,null)),e=this._getDimension(),h(this._element).removeClass(at).addClass(lt),this._element.style[e]=0,this._triggerArray.length&&h(this._triggerArray).removeClass(ct).attr("aria-expanded",!0),this.setTransitioning(!0),n="scroll"+(e[0].toUpperCase()+e.slice(1)),i=u.getTransitionDurationFromElement(this._element),h(this._element).one(u.TRANSITION_END,function(){h(o._element).removeClass(lt).addClass(at).addClass(v),o._element.style[e]="",o.setTransitioning(!1),h(o._element).trigger(st.SHOWN)}).emulateTransitionEnd(i),this._element.style[e]=this._element[n]+"px"))},s.hide=function(){var t=this;if(!this._isTransitioning&&h(this._element).hasClass(v)){var e=h.Event(st.HIDE);if(h(this._element).trigger(e),!e.isDefaultPrevented()){var e=this._getDimension(),n=(this._element.style[e]=this._element.getBoundingClientRect()[e]+"px",u.reflow(this._element),h(this._element).addClass(lt).removeClass(at).removeClass(v),this._triggerArray.length);if(0<n)for(var i=0;i<n;i++){var o=this._triggerArray[i],r=u.getSelectorFromElement(o);null===r||h([].slice.call(document.querySelectorAll(r))).hasClass(v)||h(o).addClass(ct).attr("aria-expanded",!1)}this.setTransitioning(!0),this._element.style[e]="";e=u.getTransitionDurationFromElement(this._element);h(this._element).one(u.TRANSITION_END,function(){t.setTransitioning(!1),h(t._element).removeClass(lt).addClass(at).trigger(st.HIDDEN)}).emulateTransitionEnd(e)}}},s.setTransitioning=function(t){this._isTransitioning=t},s.dispose=function(){h.removeData(this._element,_),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},s._getConfig=function(t){return(t=r({},ot,t)).toggle=Boolean(t.toggle),u.typeCheckConfig(g,t,rt),t},s._getDimension=function(){return h(this._element).hasClass("width")?"width":"height"},s._getParent=function(){var t,n=this,e=(u.isElement(this._config.parent)?(t=this._config.parent,void 0!==this._config.parent.jquery&&(t=this._config.parent[0])):t=document.querySelector(this._config.parent),'[data-toggle="collapse"][data-parent="'+this._config.parent+'"]'),e=[].slice.call(t.querySelectorAll(e));return h(e).each(function(t,e){n._addAriaAndCollapsedClass(y._getTargetFromElement(e),[e])}),t},s._addAriaAndCollapsedClass=function(t,e){t=h(t).hasClass(v);e.length&&h(e).toggleClass(ct,!t).attr("aria-expanded",t)},y._getTargetFromElement=function(t){t=u.getSelectorFromElement(t);return t?document.querySelector(t):null},y._jQueryInterface=function(i){return this.each(function(){var t=h(this),e=t.data(_),n=r({},ot,t.data(),"object"==_typeof(i)&&i?i:{});if(!e&&n.toggle&&/show|hide/.test(i)&&(n.toggle=!1),e||(e=new y(this,n),t.data(_,e)),"string"==typeof i){if(void 0===e[i])throw new TypeError('No method named "'+i+'"');e[i]()}})},e(y,null,[{key:"VERSION",get:function(){return"4.2.1"}},{key:"Default",get:function(){return ot}}]),y);function y(e,t){this._isTransitioning=!1,this._element=e,this._config=this._getConfig(t),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'));for(var n=[].slice.call(document.querySelectorAll(ht)),i=0,o=n.length;i<o;i++){var r=n[i],s=u.getSelectorFromElement(r),a=[].slice.call(document.querySelectorAll(s)).filter(function(t){return t===e});null!==s&&0<a.length&&(this._selector=s,this._triggerArray.push(r))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}h(document).on(st.CLICK_DATA_API,ht,function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var n=h(this),t=u.getSelectorFromElement(this),t=[].slice.call(document.querySelectorAll(t));h(t).each(function(){var t=h(this),e=t.data(_)?"toggle":n.data();ut._jQueryInterface.call(t,e)})}),h.fn[g]=ut._jQueryInterface,h.fn[g].Constructor=ut,h.fn[g].noConflict=function(){return h.fn[g]=it,ut._jQueryInterface};for(var ft="undefined"!=typeof window&&"undefined"!=typeof document,dt=["Edge","Trident","Firefox"],pt=0,mt=0;mt<dt.length;mt+=1)if(ft&&0<=navigator.userAgent.indexOf(dt[mt])){pt=1;break}var gt=ft&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then(function(){e=!1,t()}))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},pt))}};function _t(t){return t&&"[object Function]"==={}.toString.call(t)}function E(t,e){return 1!==t.nodeType?[]:(t=t.ownerDocument.defaultView.getComputedStyle(t,null),e?t[e]:t)}function vt(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function yt(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=E(t),n=e.overflow,i=e.overflowX,e=e.overflowY;return/(auto|scroll|overlay)/.test(n+e+i)?t:yt(vt(t))}var Et=ft&&!(!window.MSInputMethodContext||!document.documentMode),bt=ft&&/MSIE 10/.test(navigator.userAgent);function wt(t){return 11===t?Et:10!==t&&Et||bt}function Tt(t){if(!t)return document.documentElement;for(var e=wt(10)?document.body:null,n=t.offsetParent||null;n===e&&t.nextElementSibling;)n=(t=t.nextElementSibling).offsetParent;var i=n&&n.nodeName;return i&&"BODY"!==i&&"HTML"!==i?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===E(n,"position")?Tt(n):n:(t?t.ownerDocument:document).documentElement}function Ct(t){return null!==t.parentNode?Ct(t.parentNode):t}function St(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?t:e,n=n?e:t,o=document.createRange();o.setStart(i,0),o.setEnd(n,0);o=o.commonAncestorContainer;return t!==o&&e!==o||i.contains(n)?"BODY"===(n=(i=o).nodeName)||"HTML"!==n&&Tt(i.firstElementChild)!==i?Tt(o):o:(n=Ct(t)).host?St(n.host,e):St(t,Ct(e).host)}function Dt(t,e){var e="top"===(1<arguments.length&&void 0!==e?e:"top")?"scrollTop":"scrollLeft",n=t.nodeName;return("BODY"!==n&&"HTML"!==n?t:(n=t.ownerDocument.documentElement,t.ownerDocument.scrollingElement||n))[e]}function It(t,e){var e="x"===e?"Left":"Top",n="Left"==e?"Right":"Bottom";return parseFloat(t["border"+e+"Width"],10)+parseFloat(t["border"+n+"Width"],10)}function At(t,e,n,i){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],wt(10)?parseInt(n["offset"+t])+parseInt(i["margin"+("Height"===t?"Top":"Left")])+parseInt(i["margin"+("Height"===t?"Bottom":"Right")]):0)}function Ot(t){var e=t.body,t=t.documentElement,n=wt(10)&&getComputedStyle(t);return{height:At("Height",e,t,n),width:At("Width",e,t,n)}}function Nt(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var n=function(t,e,n){return e&&kt(t.prototype,e),n&&kt(t,n),t},b=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n,i=arguments[e];for(n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t};function kt(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function w(t){return b({},t,{right:t.left+t.width,bottom:t.top+t.height})}function Lt(t){var e={};try{wt(10)?(e=t.getBoundingClientRect(),i=Dt(t,"top"),o=Dt(t,"left"),e.top+=i,e.left+=o,e.bottom+=i,e.right+=o):e=t.getBoundingClientRect()}catch(t){}var n,i={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},o="HTML"===t.nodeName?Ot(t.ownerDocument):{},e=o.width||t.clientWidth||i.right-i.left,o=o.height||t.clientHeight||i.bottom-i.top,e=t.offsetWidth-e,o=t.offsetHeight-o;return(e||o)&&(e-=It(n=E(t),"x"),o-=It(n,"y"),i.width-=e,i.height-=o),w(i)}function Pt(t,e,n){var n=2<arguments.length&&void 0!==n&&n,i=wt(10),o="HTML"===e.nodeName,r=Lt(t),s=Lt(e),t=yt(t),a=E(e),l=parseFloat(a.borderTopWidth,10),c=parseFloat(a.borderLeftWidth,10),s=(n&&o&&(s.top=Math.max(s.top,0),s.left=Math.max(s.left,0)),w({top:r.top-s.top-l,left:r.left-s.left-c,width:r.width,height:r.height}));return s.marginTop=0,s.marginLeft=0,!i&&o&&(r=parseFloat(a.marginTop,10),o=parseFloat(a.marginLeft,10),s.top-=l-r,s.bottom-=l-r,s.left-=c-o,s.right-=c-o,s.marginTop=r,s.marginLeft=o),s=(i&&!n?e.contains(t):e===t&&"BODY"!==t.nodeName)?function(t,e,n){var n=2<arguments.length&&void 0!==n&&n,i=Dt(e,"top"),e=Dt(e,"left"),n=n?-1:1;return t.top+=i*n,t.bottom+=i*n,t.left+=e*n,t.right+=e*n,t}(s,e):s}function xt(t){if(!t||!t.parentElement||wt())return document.documentElement;for(var e=t.parentElement;e&&"none"===E(e,"transform");)e=e.parentElement;return e||document.documentElement}function Ht(t,e,n,i,o){var r,o=4<arguments.length&&void 0!==o&&o,s={top:0,left:0},a=o?xt(t):St(t,e),a=("viewport"===i?s=function(t,e){var e=1<arguments.length&&void 0!==e&&e,n=t.ownerDocument.documentElement,t=Pt(t,n),i=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),r=e?0:Dt(n),e=e?0:Dt(n,"left");return w({top:r-t.top+t.marginTop,left:e-t.left+t.marginLeft,width:i,height:o})}(a,o):(r=void 0,"scrollParent"===i?"BODY"===(r=yt(vt(e))).nodeName&&(r=t.ownerDocument.documentElement):r="window"===i?t.ownerDocument.documentElement:i,e=Pt(r,a,o),"HTML"!==r.nodeName||function t(e){var n=e.nodeName;return"BODY"!==n&&"HTML"!==n&&("fixed"===E(e,"position")||t(vt(e)))}(a)?s=e:(o=(i=Ot(t.ownerDocument)).height,r=i.width,s.top+=e.top-e.marginTop,s.bottom=o+e.top,s.left+=e.left-e.marginLeft,s.right=r+e.left)),"number"==typeof(n=n||0));return s.left+=a?n:n.left||0,s.top+=a?n:n.top||0,s.right-=a?n:n.right||0,s.bottom-=a?n:n.bottom||0,s}function jt(t,e,n,i,o,r){var s,r=5<arguments.length&&void 0!==r?r:0;return-1===t.indexOf("auto")?t:(i=Ht(n,i,r,o),s={top:{width:i.width,height:e.top-i.top},right:{width:i.right-e.right,height:i.height},bottom:{width:i.width,height:i.bottom-e.bottom},left:{width:e.left-i.left,height:i.height}},(0<(o=(r=Object.keys(s).map(function(t){return b({key:t},s[t],{area:(t=s[t]).width*t.height})}).sort(function(t,e){return e.area-t.area})).filter(function(t){var e=t.width,t=t.height;return e>=n.clientWidth&&t>=n.clientHeight})).length?o:r)[0].key+((e=t.split("-")[1])?"-"+e:""))}function Rt(t,e,n,i){i=3<arguments.length&&void 0!==i?i:null;return Pt(n,i?xt(e):St(e,n),i)}function Ft(t){var e=t.ownerDocument.defaultView.getComputedStyle(t),n=parseFloat(e.marginTop||0)+parseFloat(e.marginBottom||0),e=parseFloat(e.marginLeft||0)+parseFloat(e.marginRight||0);return{width:t.offsetWidth+e,height:t.offsetHeight+n}}function Mt(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function Wt(t,e,n){n=n.split("-")[0];var t=Ft(t),i={width:t.width,height:t.height},o=-1!==["right","left"].indexOf(n),r=o?"top":"left",s=o?"left":"top",a=o?"height":"width",o=o?"width":"height";return i[r]=e[r]+e[a]/2-t[a]/2,i[s]=n===s?e[s]-t[o]:e[Mt(s)],i}function Ut(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function Bt(t,n,e){return(void 0===e?t:t.slice(0,(t=t,i=e,Array.prototype.findIndex?t.findIndex(function(t){return t.name===i}):(e=Ut(t,function(t){return t.name===i}),t.indexOf(e))))).forEach(function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var e=t.function||t.fn;t.enabled&&_t(e)&&(n.offsets.popper=w(n.offsets.popper),n.offsets.reference=w(n.offsets.reference),n=e(n,t))}),n;var i}function qt(t,n){return t.some(function(t){var e=t.name;return t.enabled&&e===n})}function Kt(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),i=0;i<e.length;i++){var o=e[i],o=o?""+o+n:t;if(void 0!==document.body.style[o])return o}return null}function Qt(t){t=t.ownerDocument;return t?t.defaultView:window}function Yt(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function Vt(n,i){Object.keys(i).forEach(function(t){var e="";-1!==["width","height","top","right","bottom","left"].indexOf(t)&&Yt(i[t])&&(e="px"),n.style[t]=i[t]+e})}var Xt=ft&&/Firefox/i.test(navigator.userAgent);function zt(t,e,n){var i,o=Ut(t,function(t){return t.name===e}),t=!!o&&t.some(function(t){return t.name===n&&t.enabled&&t.order<o.order});return t||(i="`"+e+"`",console.warn("`"+n+"`"+" modifier is required by "+i+" modifier in order to work, be sure to include it before "+i+"!")),t}var a=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],Gt=a.slice(3);function Jt(t,e){e=1<arguments.length&&void 0!==e&&e,t=Gt.indexOf(t),t=Gt.slice(t+1).concat(Gt.slice(0,t));return e?t.reverse():t}function Zt(t,a,l,e){var o=[0,0],i=-1!==["right","left"].indexOf(e),e=t.split(/(\+|\-)/).map(function(t){return t.trim()}),t=e.indexOf(Ut(e,function(t){return-1!==t.search(/,|\s/)})),n=(e[t]&&-1===e[t].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead."),/\s*,\s*|\s+/);return(-1!==t?[e.slice(0,t).concat([e[t].split(n)[0]]),[e[t].split(n)[1]].concat(e.slice(t+1))]:[e]).map(function(t,e){var s=(1===e?!i:i)?"height":"width",n=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,n=!0,t):n?(t[t.length-1]+=e,n=!1,t):t.concat(e)},[]).map(function(t){return e=s,n=a,i=l,o=(t=t).match(/((?:\-|\+)?\d*\.?\d*)(.*)/),r=+o[1],o=o[2],r?0!==o.indexOf("%")?"vh"!==o&&"vw"!==o?r:("vh"===o?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*r:w("%p"===o?n:i)[e]/100*r:t;var e,n,i,o,r})}).forEach(function(n,i){n.forEach(function(t,e){Yt(t)&&(o[i]+=t*("-"===n[e-1]?-1:1))})}),o}var s={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e,n,i,o=t.placement,r=o.split("-")[0],o=o.split("-")[1];return o&&(e=(n=t.offsets).reference,n=n.popper,i=(r=-1!==["bottom","top"].indexOf(r))?"width":"height",r={start:Nt({},r=r?"left":"top",e[r]),end:Nt({},r,e[r]+e[i]-n[i])},t.offsets.popper=b({},n,r[o])),t}},offset:{order:200,enabled:!0,fn:function(t,e){var e=e.offset,n=t.placement,i=t.offsets,o=i.popper,i=i.reference,n=n.split("-")[0],e=Yt(+e)?[+e,0]:Zt(e,o,i,n);return"left"===n?(o.top+=e[0],o.left-=e[1]):"right"===n?(o.top+=e[0],o.left+=e[1]):"top"===n?(o.left+=e[0],o.top-=e[1]):"bottom"===n&&(o.left+=e[0],o.top+=e[1]),t.popper=o,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,i){var e=i.boundariesElement||Tt(t.instance.popper),n=(t.instance.reference===e&&(e=Tt(e)),Kt("transform")),o=t.instance.popper.style,r=o.top,s=o.left,a=o[n],l=(o.top="",o.left="",o[n]="",Ht(t.instance.popper,t.instance.reference,i.padding,e,t.positionFixed)),e=(o.top=r,o.left=s,o[n]=a,i.boundaries=l,i.priority),c=t.offsets.popper,h={primary:function(t){var e=c[t];return c[t]<l[t]&&!i.escapeWithReference&&(e=Math.max(c[t],l[t])),Nt({},t,e)},secondary:function(t){var e="right"===t?"left":"top",n=c[e];return c[t]>l[t]&&!i.escapeWithReference&&(n=Math.min(c[e],l[t]-("right"===t?c.width:c.height))),Nt({},e,n)}};return e.forEach(function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";c=b({},c,h[e](t))}),t.offsets.popper=c,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,e=e.reference,i=t.placement.split("-")[0],o=Math.floor,i=-1!==["top","bottom"].indexOf(i),r=i?"right":"bottom",s=i?"left":"top",i=i?"width":"height";return n[r]<o(e[s])&&(t.offsets.popper[s]=o(e[s])-n[i]),n[s]>o(e[r])&&(t.offsets.popper[s]=o(e[r])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){if(zt(t.instance.modifiers,"arrow","keepTogether")){e=e.element;if("string"==typeof e){if(!(e=t.instance.popper.querySelector(e)))return t}else if(!t.instance.popper.contains(e))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var n=t.placement.split("-")[0],i=t.offsets,o=i.popper,i=i.reference,n=-1!==["left","right"].indexOf(n),r=n?"height":"width",s=n?"Top":"Left",a=s.toLowerCase(),l=n?"left":"top",n=n?"bottom":"right",c=Ft(e)[r],n=(i[n]-c<o[a]&&(t.offsets.popper[a]-=o[a]-(i[n]-c)),i[a]+c>o[n]&&(t.offsets.popper[a]+=i[a]+c-o[n]),t.offsets.popper=w(t.offsets.popper),i[a]+i[r]/2-c/2),i=E(t.instance.popper),h=parseFloat(i["margin"+s],10),i=parseFloat(i["border"+s+"Width"],10),s=n-t.offsets.popper[a]-h-i,s=Math.max(Math.min(o[r]-c,s),0);t.arrowElement=e,t.offsets.arrow=(Nt(n={},a,Math.round(s)),Nt(n,l,""),n)}return t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(l,c){if(!(qt(l.instance.modifiers,"inner")||l.flipped&&l.placement===l.originalPlacement)){var h=Ht(l.instance.popper,l.instance.reference,c.padding,c.boundariesElement,l.positionFixed),u=l.placement.split("-")[0],f=Mt(u),d=l.placement.split("-")[1]||"",p=[];switch(c.behavior){case"flip":p=[u,f];break;case"clockwise":p=Jt(u);break;case"counterclockwise":p=Jt(u,!0);break;default:p=c.behavior}p.forEach(function(t,e){if(u!==t||p.length===e+1)return l;u=l.placement.split("-")[0],f=Mt(u);var t=l.offsets.popper,n=l.offsets.reference,i=Math.floor,n="left"===u&&i(t.right)>i(n.left)||"right"===u&&i(t.left)<i(n.right)||"top"===u&&i(t.bottom)>i(n.top)||"bottom"===u&&i(t.top)<i(n.bottom),o=i(t.left)<i(h.left),r=i(t.right)>i(h.right),s=i(t.top)<i(h.top),t=i(t.bottom)>i(h.bottom),i="left"===u&&o||"right"===u&&r||"top"===u&&s||"bottom"===u&&t,a=-1!==["top","bottom"].indexOf(u),o=!!c.flipVariations&&(a&&"start"===d&&o||a&&"end"===d&&r||!a&&"start"===d&&s||!a&&"end"===d&&t);(n||i||o)&&(l.flipped=!0,(n||i)&&(u=p[e+1]),o&&(d="end"===d?"start":"start"===d?"end":d),l.placement=u+(d?"-"+d:""),l.offsets.popper=b({},l.offsets.popper,Wt(l.instance.popper,l.offsets.reference,l.placement)),l=Bt(l.instance.modifiers,l,"flip"))})}return l},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],i=t.offsets,o=i.popper,i=i.reference,r=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return o[r?"left":"top"]=i[n]-(s?o[r?"width":"height"]:0),t.placement=Mt(e),t.offsets.popper=w(o),t}},hide:{order:800,enabled:!0,fn:function(t){if(zt(t.instance.modifiers,"hide","preventOverflow")){var e=t.offsets.reference,n=Ut(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,i=e.y,o=t.offsets.popper,r=Ut(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==r&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var s,r=void 0!==r?r:e.gpuAcceleration,e=Tt(t.instance.popper),a=Lt(e),o={position:o.position},l=(h=t,u=window.devicePixelRatio<2||!Xt,s=(c=h.offsets).popper,c=c.reference,d=-1!==["left","right"].indexOf(h.placement),h=-1!==h.placement.indexOf("-"),f=c.width%2==s.width%2,c=c.width%2==1&&s.width%2==1,l=function(t){return t},d=u?d||h||f?Math.round:Math.floor:l,f=u?Math.round:l,{left:d(c&&!h&&u?s.left-1:s.left),top:f(s.top),bottom:f(s.bottom),right:d(s.right)}),c="bottom"===n?"top":"bottom",h="right"===i?"left":"right",u=Kt("transform"),f="bottom"==c?"HTML"===e.nodeName?-e.clientHeight+l.bottom:-a.height+l.bottom:l.top,d="right"==h?"HTML"===e.nodeName?-e.clientWidth+l.right:-a.width+l.right:l.left,n=(r&&u?(o[u]="translate3d("+d+"px, "+f+"px, 0)",o[c]=0,o[h]=0,o.willChange="transform"):(s="right"==h?-1:1,o[c]=f*("bottom"==c?-1:1),o[h]=d*s,o.willChange=c+", "+h),{"x-placement":t.placement});return t.attributes=b({},n,t.attributes),t.styles=b({},o,t.styles),t.arrowStyles=b({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,n;return Vt(t.instance.popper,t.styles),e=t.instance.popper,n=t.attributes,Object.keys(n).forEach(function(t){!1!==n[t]?e.setAttribute(t,n[t]):e.removeAttribute(t)}),t.arrowElement&&Object.keys(t.arrowStyles).length&&Vt(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,i,o){o=Rt(o,e,t,n.positionFixed),o=jt(n.placement,o,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",o),Vt(e,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},T=(n($t,[{key:"update",value:function(){return function(){var t;this.state.isDestroyed||((t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}}).offsets.reference=Rt(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=jt(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=Wt(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=Bt(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t)))}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,qt(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[Kt("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){var t,e,n;this.state.eventsEnabled||(this.state=(t=this.reference,this.options,e=this.state,n=this.scheduleUpdate,e.updateBound=n,Qt(t).addEventListener("resize",e.updateBound,{passive:!0}),function t(e,n,i,o){var r="BODY"===e.nodeName,e=r?e.ownerDocument.defaultView:e;e.addEventListener(n,i,{passive:!0}),r||t(yt(e.parentNode),n,i,o),o.push(e)}(n=yt(t),"scroll",e.updateBound,e.scrollParents),e.scrollElement=n,e.eventsEnabled=!0,e))}.call(this)}},{key:"disableEventListeners",value:function(){return function(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,Qt(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}.call(this)}}]),$t);function $t(t,e){var n=this,i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{},o=this;if(!(o instanceof $t))throw new TypeError("Cannot call a class as a function");this.scheduleUpdate=function(){return requestAnimationFrame(n.update)},this.update=gt(this.update.bind(this)),this.options=b({},$t.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=e&&e.jquery?e[0]:e,this.options.modifiers={},Object.keys(b({},$t.Defaults.modifiers,i.modifiers)).forEach(function(t){n.options.modifiers[t]=b({},$t.Defaults.modifiers[t]||{},i.modifiers?i.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return b({name:t},n.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(t){t.enabled&&_t(t.onLoad)&&t.onLoad(n.reference,n.popper,n.options,t,n.state)}),this.update();o=this.options.eventsEnabled;o&&this.enableEventListeners(),this.state.eventsEnabled=o}T.Utils=("undefined"!=typeof window?window:global).PopperUtils,T.placements=a,T.Defaults=s;var te="dropdown",ee="bs.woo-invoice-dropdown",C="."+ee,n=".data-api",ne=h.fn[te],ie=new RegExp("38|40|27"),S={HIDE:"hide"+C,HIDDEN:"hidden"+C,SHOW:"show"+C,SHOWN:"shown"+C,CLICK:"click"+C,CLICK_DATA_API:"click"+C+n,KEYDOWN_DATA_API:"keydown"+C+n,KEYUP_DATA_API:"keyup"+C+n},oe="disabled",D="show",re="dropdown-menu-right",se='[data-toggle="dropdown"]',ae=".woo-invoice-dropdown-menu",le={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},ce={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},I=((a=A.prototype).toggle=function(){if(!this._element.disabled&&!h(this._element).hasClass(oe)){var t=A._getParentFromElement(this._element),e=h(this._menu).hasClass(D);if(A._clearMenus(),!e){var e={relatedTarget:this._element},n=h.Event(S.SHOW,e);if(h(t).trigger(n),!n.isDefaultPrevented()){if(!this._inNavbar){if(void 0===T)throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");n=this._element;"parent"===this._config.reference?n=t:u.isElement(this._config.reference)&&(n=this._config.reference,void 0!==this._config.reference.jquery)&&(n=this._config.reference[0]),"scrollParent"!==this._config.boundary&&h(t).addClass("position-static"),this._popper=new T(n,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===h(t).closest(".woo-invoice-navbar-nav").length&&h(document.body).children().on("mouseover",null,h.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),h(this._menu).toggleClass(D),h(t).toggleClass(D).trigger(h.Event(S.SHOWN,e))}}}},a.show=function(){var t,e,n;this._element.disabled||h(this._element).hasClass(oe)||h(this._menu).hasClass(D)||(t={relatedTarget:this._element},e=h.Event(S.SHOW,t),n=A._getParentFromElement(this._element),h(n).trigger(e),e.isDefaultPrevented())||(h(this._menu).toggleClass(D),h(n).toggleClass(D).trigger(h.Event(S.SHOWN,t)))},a.hide=function(){var t,e,n;this._element.disabled||h(this._element).hasClass(oe)||!h(this._menu).hasClass(D)||(t={relatedTarget:this._element},e=h.Event(S.HIDE,t),n=A._getParentFromElement(this._element),h(n).trigger(e),e.isDefaultPrevented())||(h(this._menu).toggleClass(D),h(n).toggleClass(D).trigger(h.Event(S.HIDDEN,t)))},a.dispose=function(){h.removeData(this._element,ee),h(this._element).off(C),this._element=null,(this._menu=null)!==this._popper&&(this._popper.destroy(),this._popper=null)},a.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},a._addEventListeners=function(){var e=this;h(this._element).on(S.CLICK,function(t){t.preventDefault(),t.stopPropagation(),e.toggle()})},a._getConfig=function(t){return t=r({},this.constructor.Default,h(this._element).data(),t),u.typeCheckConfig(te,t,this.constructor.DefaultType),t},a._getMenuElement=function(){var t;return this._menu||(t=A._getParentFromElement(this._element))&&(this._menu=t.querySelector(ae)),this._menu},a._getPlacement=function(){var t=h(this._element.parentNode),e="bottom-start";return t.hasClass("dropup")?(e="top-start",h(this._menu).hasClass(re)&&(e="top-end")):t.hasClass("dropright")?e="right-start":t.hasClass("dropleft")?e="left-start":h(this._menu).hasClass(re)&&(e="bottom-end"),e},a._detectNavbar=function(){return 0<h(this._element).closest(".woo-invoice-navbar").length},a._getPopperConfig=function(){var e=this,t={},t=("function"==typeof this._config.offset?t.fn=function(t){return t.offsets=r({},t.offsets,e._config.offset(t.offsets)||{}),t}:t.offset=this._config.offset,{placement:this._getPlacement(),modifiers:{offset:t,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}});return"static"===this._config.display&&(t.modifiers.applyStyle={enabled:!1}),t},A._jQueryInterface=function(e){return this.each(function(){var t=h(this).data(ee);if(t||(t=new A(this,"object"==_typeof(e)?e:null),h(this).data(ee,t)),"string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'+e+'"');t[e]()}})},A._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var e=[].slice.call(document.querySelectorAll(se)),n=0,i=e.length;n<i;n++){var o,r=A._getParentFromElement(e[n]),s=h(e[n]).data(ee),a={relatedTarget:e[n]};t&&"click"===t.type&&(a.clickEvent=t),s&&(s=s._menu,!h(r).hasClass(D)||t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&h.contains(r,t.target)||(o=h.Event(S.HIDE,a),h(r).trigger(o),o.isDefaultPrevented())||("ontouchstart"in document.documentElement&&h(document.body).children().off("mouseover",null,h.noop),e[n].setAttribute("aria-expanded","false"),h(s).removeClass(D),h(r).removeClass(D).trigger(h.Event(S.HIDDEN,a))))}},A._getParentFromElement=function(t){var e,n=u.getSelectorFromElement(t);return(e=n?document.querySelector(n):e)||t.parentNode},A._dataApiKeydownHandler=function(t){var e,n,i;(/input|textarea/i.test(t.target.tagName)?32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||h(t.target).closest(ae).length):!ie.test(t.which))||(t.preventDefault(),t.stopPropagation(),this.disabled)||h(this).hasClass(oe)||(e=A._getParentFromElement(this),(i=h(e).hasClass(D))&&(!i||27!==t.which&&32!==t.which)?0!==(i=[].slice.call(e.querySelectorAll(".woo-invoice-dropdown-menu .woo-invoice-dropdown-item:not(.disabled):not(:disabled)"))).length&&(n=i.indexOf(t.target),38===t.which&&0<n&&n--,40===t.which&&n<i.length-1&&n++,i[n=n<0?0:n].focus()):(27===t.which&&(i=e.querySelector(se),h(i).trigger("focus")),h(this).trigger("click")))},e(A,null,[{key:"VERSION",get:function(){return"4.2.1"}},{key:"Default",get:function(){return le}},{key:"DefaultType",get:function(){return ce}}]),A);function A(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}h(document).on(S.KEYDOWN_DATA_API,se,I._dataApiKeydownHandler).on(S.KEYDOWN_DATA_API,ae,I._dataApiKeydownHandler).on(S.CLICK_DATA_API+" "+S.KEYUP_DATA_API,I._clearMenus).on(S.CLICK_DATA_API,se,function(t){t.preventDefault(),t.stopPropagation(),I._jQueryInterface.call(h(this),"toggle")}).on(S.CLICK_DATA_API,".woo-invoice-dropdown form",function(t){t.stopPropagation()}),h.fn[te]=I._jQueryInterface,h.fn[te].Constructor=I,h.fn[te].noConflict=function(){return h.fn[te]=ne,I._jQueryInterface};var he="modal",ue="bs.woo-invoice-modal",O="."+ue,fe=h.fn[he],de={backdrop:!0,keyboard:!0,focus:!0,show:!0},pe={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},N={HIDE:"hide"+O,HIDDEN:"hidden"+O,SHOW:"show"+O,SHOWN:"shown"+O,FOCUSIN:"focusin"+O,RESIZE:"resize"+O,CLICK_DISMISS:"click.dismiss"+O,KEYDOWN_DISMISS:"keydown.dismiss"+O,MOUSEUP_DISMISS:"mouseup.dismiss"+O,MOUSEDOWN_DISMISS:"mousedown.dismiss"+O,CLICK_DATA_API:"click"+O+".data-api"},me="woo-invoice-modal-open",ge="fade",_e="show",ve=".woo-invoice-fixed-top, .woo-invoice-fixed-bottom, .woo-invoice-is-fixed, .woo-invoice-sticky-top",ye=".woo-invoice-sticky-top",Ee=((s=be.prototype).toggle=function(t){return this._isShown?this.hide():this.show(t)},s.show=function(t){var e,n=this;this._isShown||this._isTransitioning||(h(this._element).hasClass(ge)&&(this._isTransitioning=!0),e=h.Event(N.SHOW,{relatedTarget:t}),h(this._element).trigger(e),this._isShown)||e.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),h(this._element).on(N.CLICK_DISMISS,'[data-dismiss="modal"]',function(t){return n.hide(t)}),h(this._dialog).on(N.MOUSEDOWN_DISMISS,function(){h(n._element).one(N.MOUSEUP_DISMISS,function(t){h(t.target).is(n._element)&&(n._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return n._showElement(t)}))},s.hide=function(t){var e=this;t&&t.preventDefault(),this._isShown&&!this._isTransitioning&&(t=h.Event(N.HIDE),h(this._element).trigger(t),this._isShown)&&!t.isDefaultPrevented()&&(this._isShown=!1,(t=h(this._element).hasClass(ge))&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),h(document).off(N.FOCUSIN),h(this._element).removeClass(_e),h(this._element).off(N.CLICK_DISMISS),h(this._dialog).off(N.MOUSEDOWN_DISMISS),t?(t=u.getTransitionDurationFromElement(this._element),h(this._element).one(u.TRANSITION_END,function(t){return e._hideModal(t)}).emulateTransitionEnd(t)):this._hideModal())},s.dispose=function(){[window,this._element,this._dialog].forEach(function(t){return h(t).off(O)}),h(document).off(N.FOCUSIN),h.removeData(this._element,ue),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._isTransitioning=null,this._scrollbarWidth=null},s.handleUpdate=function(){this._adjustDialog()},s._getConfig=function(t){return t=r({},de,t),u.typeCheckConfig(he,t,pe),t},s._showElement=function(t){function e(){n._config.focus&&n._element.focus(),n._isTransitioning=!1,h(n._element).trigger(o)}var n=this,i=h(this._element).hasClass(ge),o=(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.scrollTop=0,i&&u.reflow(this._element),h(this._element).addClass(_e),this._config.focus&&this._enforceFocus(),h.Event(N.SHOWN,{relatedTarget:t}));i?(t=u.getTransitionDurationFromElement(this._dialog),h(this._dialog).one(u.TRANSITION_END,e).emulateTransitionEnd(t)):e()},s._enforceFocus=function(){var e=this;h(document).off(N.FOCUSIN).on(N.FOCUSIN,function(t){document!==t.target&&e._element!==t.target&&0===h(e._element).has(t.target).length&&e._element.focus()})},s._setEscapeEvent=function(){var e=this;this._isShown&&this._config.keyboard?h(this._element).on(N.KEYDOWN_DISMISS,function(t){27===t.which&&(t.preventDefault(),e.hide())}):this._isShown||h(this._element).off(N.KEYDOWN_DISMISS)},s._setResizeEvent=function(){var e=this;this._isShown?h(window).on(N.RESIZE,function(t){return e.handleUpdate(t)}):h(window).off(N.RESIZE)},s._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._isTransitioning=!1,this._showBackdrop(function(){h(document.body).removeClass(me),t._resetAdjustments(),t._resetScrollbar(),h(t._element).trigger(N.HIDDEN)})},s._removeBackdrop=function(){this._backdrop&&(h(this._backdrop).remove(),this._backdrop=null)},s._showBackdrop=function(t){var e,n=this,i=h(this._element).hasClass(ge)?ge:"";this._isShown&&this._config.backdrop?(this._backdrop=document.createElement("div"),this._backdrop.className="woo-invoice-modal-backdrop",i&&this._backdrop.classList.add(i),h(this._backdrop).appendTo(document.body),h(this._element).on(N.CLICK_DISMISS,function(t){n._ignoreBackdropClick?n._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide())}),i&&u.reflow(this._backdrop),h(this._backdrop).addClass(_e),t&&(i?(i=u.getTransitionDurationFromElement(this._backdrop),h(this._backdrop).one(u.TRANSITION_END,t).emulateTransitionEnd(i)):t())):!this._isShown&&this._backdrop?(h(this._backdrop).removeClass(_e),i=function(){n._removeBackdrop(),t&&t()},h(this._element).hasClass(ge)?(e=u.getTransitionDurationFromElement(this._backdrop),h(this._backdrop).one(u.TRANSITION_END,i).emulateTransitionEnd(e)):i()):t&&t()},s._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},s._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},s._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},s._setScrollbar=function(){var t,e,o=this;this._isBodyOverflowing&&(t=[].slice.call(document.querySelectorAll(ve)),e=[].slice.call(document.querySelectorAll(ye)),h(t).each(function(t,e){var n=e.style.paddingRight,i=h(e).css("padding-right");h(e).data("padding-right",n).css("padding-right",parseFloat(i)+o._scrollbarWidth+"px")}),h(e).each(function(t,e){var n=e.style.marginRight,i=h(e).css("margin-right");h(e).data("margin-right",n).css("margin-right",parseFloat(i)-o._scrollbarWidth+"px")}),t=document.body.style.paddingRight,e=h(document.body).css("padding-right"),h(document.body).data("padding-right",t).css("padding-right",parseFloat(e)+this._scrollbarWidth+"px")),h(document.body).addClass(me)},s._resetScrollbar=function(){var t=[].slice.call(document.querySelectorAll(ve)),t=(h(t).each(function(t,e){var n=h(e).data("padding-right");h(e).removeData("padding-right"),e.style.paddingRight=n||""}),[].slice.call(document.querySelectorAll(ye))),t=(h(t).each(function(t,e){var n=h(e).data("margin-right");void 0!==n&&h(e).css("margin-right",n).removeData("margin-right")}),h(document.body).data("padding-right"));h(document.body).removeData("padding-right"),document.body.style.paddingRight=t||""},s._getScrollbarWidth=function(){var t=document.createElement("div"),e=(t.className="woo-invoice-modal-scrollbar-measure",document.body.appendChild(t),t.getBoundingClientRect().width-t.clientWidth);return document.body.removeChild(t),e},be._jQueryInterface=function(n,i){return this.each(function(){var t=h(this).data(ue),e=r({},de,h(this).data(),"object"==_typeof(n)&&n?n:{});if(t||(t=new be(this,e),h(this).data(ue,t)),"string"==typeof n){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n](i)}else e.show&&t.show(i)})},e(be,null,[{key:"VERSION",get:function(){return"4.2.1"}},{key:"Default",get:function(){return de}}]),be);function be(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=t.querySelector(".woo-invoice-modal-dialog"),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollbarWidth=0}h(document).on(N.CLICK_DATA_API,'[data-toggle="modal"]',function(t){var e,n=this,i=u.getSelectorFromElement(this),i=(i&&(e=document.querySelector(i)),h(e).data(ue)?"toggle":r({},h(e).data(),h(this).data())),o=("A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault(),h(e).one(N.SHOW,function(t){t.isDefaultPrevented()||o.one(N.HIDDEN,function(){h(n).is(":visible")&&n.focus()})}));Ee._jQueryInterface.call(h(e),i,this)}),h.fn[he]=Ee._jQueryInterface,h.fn[he].Constructor=Ee,h.fn[he].noConflict=function(){return h.fn[he]=fe,Ee._jQueryInterface};var k="tooltip",we="bs.tooltip",L="."+we,Te=h.fn[k],Ce="bs-tooltip",Se=new RegExp("(^|\\s)"+Ce+"\\S+","g"),De={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"},Ie={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},Ae={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},Oe="show",Ne={HIDE:"hide"+L,HIDDEN:"hidden"+L,SHOW:"show"+L,SHOWN:"shown"+L,INSERTED:"inserted"+L,CLICK:"click"+L,FOCUSIN:"focusin"+L,FOCUSOUT:"focusout"+L,MOUSEENTER:"mouseenter"+L,MOUSELEAVE:"mouseleave"+L},ke="fade",Le="show",Pe="hover",xe="focus",P=((n=He.prototype).enable=function(){this._isEnabled=!0},n.disable=function(){this._isEnabled=!1},n.toggleEnabled=function(){this._isEnabled=!this._isEnabled},n.toggle=function(t){var e,n;this._isEnabled&&(t?(e=this.constructor.DATA_KEY,(n=h(t.currentTarget).data(e))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),h(t.currentTarget).data(e,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n)):h(this.getTipElement()).hasClass(Le)?this._leave(null,this):this._enter(null,this))},n.dispose=function(){clearTimeout(this._timeout),h.removeData(this.element,this.constructor.DATA_KEY),h(this.element).off(this.constructor.EVENT_KEY),h(this.element).closest(".woo-invoice-modal").off("hide.bs.woo-invoice-modal"),this.tip&&h(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,(this._activeTrigger=null)!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},n.show=function(){var e=this;if("none"===h(this.element).css("display"))throw new Error("Please use show on visible elements");var t,n,i=h.Event(this.constructor.Event.SHOW);this.isWithContent()&&this._isEnabled&&(h(this.element).trigger(i),n=u.findShadowRoot(this.element),n=h.contains(null!==n?n:this.element.ownerDocument.documentElement,this.element),!i.isDefaultPrevented())&&n&&(i=this.getTipElement(),n=u.getUID(this.constructor.NAME),i.setAttribute("id",n),this.element.setAttribute("aria-describedby",n),this.setContent(),this.config.animation&&h(i).addClass(ke),n="function"==typeof this.config.placement?this.config.placement.call(this,i,this.element):this.config.placement,n=this._getAttachment(n),this.addAttachmentClass(n),t=this._getContainer(),h(i).data(this.constructor.DATA_KEY,this),h.contains(this.element.ownerDocument.documentElement,this.tip)||h(i).appendTo(t),h(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new T(this.element,i,{placement:n,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:".arrow"},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){return e._handlePopperPlacementChange(t)}}),h(i).addClass(Le),"ontouchstart"in document.documentElement&&h(document.body).children().on("mouseover",null,h.noop),t=function(){e.config.animation&&e._fixTransition();var t=e._hoverState;e._hoverState=null,h(e.element).trigger(e.constructor.Event.SHOWN),"out"===t&&e._leave(null,e)},h(this.tip).hasClass(ke)?(n=u.getTransitionDurationFromElement(this.tip),h(this.tip).one(u.TRANSITION_END,t).emulateTransitionEnd(n)):t())},n.hide=function(t){function e(){n._hoverState!==Oe&&i.parentNode&&i.parentNode.removeChild(i),n._cleanTipClass(),n.element.removeAttribute("aria-describedby"),h(n.element).trigger(n.constructor.Event.HIDDEN),null!==n._popper&&n._popper.destroy(),t&&t()}var n=this,i=this.getTipElement(),o=h.Event(this.constructor.Event.HIDE);h(this.element).trigger(o),o.isDefaultPrevented()||(h(i).removeClass(Le),"ontouchstart"in document.documentElement&&h(document.body).children().off("mouseover",null,h.noop),this._activeTrigger.click=!1,this._activeTrigger[xe]=!1,this._activeTrigger[Pe]=!1,h(this.tip).hasClass(ke)?(o=u.getTransitionDurationFromElement(i),h(i).one(u.TRANSITION_END,e).emulateTransitionEnd(o)):e(),this._hoverState="")},n.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},n.isWithContent=function(){return Boolean(this.getTitle())},n.addAttachmentClass=function(t){h(this.getTipElement()).addClass(Ce+"-"+t)},n.getTipElement=function(){return this.tip=this.tip||h(this.config.template)[0],this.tip},n.setContent=function(){var t=this.getTipElement();this.setElementContent(h(t.querySelectorAll(".tooltip-inner")),this.getTitle()),h(t).removeClass(ke+" "+Le)},n.setElementContent=function(t,e){var n=this.config.html;"object"==_typeof(e)&&(e.nodeType||e.jquery)?n?h(e).parent().is(t)||t.empty().append(e):t.text(h(e).text()):t[n?"html":"text"](e)},n.getTitle=function(){return this.element.getAttribute("data-original-title")||("function"==typeof this.config.title?this.config.title.call(this.element):this.config.title)},n._getContainer=function(){return!1===this.config.container?document.body:u.isElement(this.config.container)?h(this.config.container):h(document).find(this.config.container)},n._getAttachment=function(t){return Ie[t.toUpperCase()]},n._setListeners=function(){var n=this;this.config.trigger.split(" ").forEach(function(t){var e;"click"===t?h(n.element).on(n.constructor.Event.CLICK,n.config.selector,function(t){return n.toggle(t)}):"manual"!==t&&(e=t===Pe?n.constructor.Event.MOUSEENTER:n.constructor.Event.FOCUSIN,t=t===Pe?n.constructor.Event.MOUSELEAVE:n.constructor.Event.FOCUSOUT,h(n.element).on(e,n.config.selector,function(t){return n._enter(t)}).on(t,n.config.selector,function(t){return n._leave(t)}))}),h(this.element).closest(".woo-invoice-modal").on("hide.bs.woo-invoice-modal",function(){n.element&&n.hide()}),this.config.selector?this.config=r({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},n._fixTitle=function(){var t=_typeof(this.element.getAttribute("data-original-title"));!this.element.getAttribute("title")&&"string"===t||(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},n._enter=function(t,e){var n=this.constructor.DATA_KEY;(e=e||h(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),h(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusin"===t.type?xe:Pe]=!0),h(e.getTipElement()).hasClass(Le)||e._hoverState===Oe?e._hoverState=Oe:(clearTimeout(e._timeout),e._hoverState=Oe,e.config.delay&&e.config.delay.show?e._timeout=setTimeout(function(){e._hoverState===Oe&&e.show()},e.config.delay.show):e.show())},n._leave=function(t,e){var n=this.constructor.DATA_KEY;(e=e||h(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),h(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusout"===t.type?xe:Pe]=!1),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState="out",e.config.delay&&e.config.delay.hide?e._timeout=setTimeout(function(){"out"===e._hoverState&&e.hide()},e.config.delay.hide):e.hide())},n._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},n._getConfig=function(t){return"number"==typeof(t=r({},this.constructor.Default,h(this.element).data(),"object"==_typeof(t)&&t?t:{})).delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),u.typeCheckConfig(k,t,this.constructor.DefaultType),t},n._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},n._cleanTipClass=function(){var t=h(this.getTipElement()),e=t.attr("class").match(Se);null!==e&&e.length&&t.removeClass(e.join(""))},n._handlePopperPlacementChange=function(t){var e=t.instance;this.tip=e.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},n._fixTransition=function(){var t=this.getTipElement(),e=this.config.animation;null===t.getAttribute("x-placement")&&(h(t).removeClass(ke),this.config.animation=!1,this.hide(),this.show(),this.config.animation=e)},He._jQueryInterface=function(n){return this.each(function(){var t=h(this).data(we),e="object"==_typeof(n)&&n;if((t||!/dispose|hide/.test(n))&&(t||(t=new He(this,e),h(this).data(we,t)),"string"==typeof n)){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}})},e(He,null,[{key:"VERSION",get:function(){return"4.2.1"}},{key:"Default",get:function(){return Ae}},{key:"NAME",get:function(){return k}},{key:"DATA_KEY",get:function(){return we}},{key:"Event",get:function(){return Ne}},{key:"EVENT_KEY",get:function(){return L}},{key:"DefaultType",get:function(){return De}}]),He);function He(t,e){if(void 0===T)throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org/)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}h.fn[k]=P._jQueryInterface,h.fn[k].Constructor=P,h.fn[k].noConflict=function(){return h.fn[k]=Te,P._jQueryInterface};var je,Re="popover",Fe="bs.popover",x="."+Fe,Me=h.fn[Re],We="bs-popover",Ue=new RegExp("(^|\\s)"+We+"\\S+","g"),Be=r({},P.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),qe=r({},P.DefaultType,{content:"(string|element|function)"}),Ke={HIDE:"hide"+x,HIDDEN:"hidden"+x,SHOW:"show"+x,SHOWN:"shown"+x,INSERTED:"inserted"+x,CLICK:"click"+x,FOCUSIN:"focusin"+x,FOCUSOUT:"focusout"+x,MOUSEENTER:"mouseenter"+x,MOUSELEAVE:"mouseleave"+x},Qe=(a=je=P,(s=Ye).prototype=Object.create(a.prototype),(s.prototype.constructor=s).__proto__=a,(s=Ye.prototype).isWithContent=function(){return this.getTitle()||this._getContent()},s.addAttachmentClass=function(t){h(this.getTipElement()).addClass(We+"-"+t)},s.getTipElement=function(){return this.tip=this.tip||h(this.config.template)[0],this.tip},s.setContent=function(){var t=h(this.getTipElement()),e=(this.setElementContent(t.find(".popover-header"),this.getTitle()),this._getContent());"function"==typeof e&&(e=e.call(this.element)),this.setElementContent(t.find(".popover-body"),e),t.removeClass("fade show")},s._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},s._cleanTipClass=function(){var t=h(this.getTipElement()),e=t.attr("class").match(Ue);null!==e&&0<e.length&&t.removeClass(e.join(""))},Ye._jQueryInterface=function(n){return this.each(function(){var t=h(this).data(Fe),e="object"==_typeof(n)?n:null;if((t||!/dispose|hide/.test(n))&&(t||(t=new Ye(this,e),h(this).data(Fe,t)),"string"==typeof n)){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}})},e(Ye,null,[{key:"VERSION",get:function(){return"4.2.1"}},{key:"Default",get:function(){return Be}},{key:"NAME",get:function(){return Re}},{key:"DATA_KEY",get:function(){return Fe}},{key:"Event",get:function(){return Ke}},{key:"EVENT_KEY",get:function(){return x}},{key:"DefaultType",get:function(){return qe}}]),Ye);function Ye(){return je.apply(this,arguments)||this}h.fn[Re]=Qe._jQueryInterface,h.fn[Re].Constructor=Qe,h.fn[Re].noConflict=function(){return h.fn[Re]=Me,Qe._jQueryInterface};var H="scrollspy",Ve="bs.scrollspy",Xe="."+Ve,ze=h.fn[H],Ge={offset:10,method:"auto",target:""},Je={offset:"number",method:"string",target:"(string|element)"},Ze={ACTIVATE:"activate"+Xe,SCROLL:"scroll"+Xe,LOAD_DATA_API:"load"+Xe+".data-api"},$e="active",tn=".woo-invoice-nav, .list-group",en=".woo-invoice-nav-link",nn=".list-group-item",on="position",rn=((n=sn.prototype).refresh=function(){var e=this,t=this._scrollElement===this._scrollElement.window?"offset":on,i="auto"===this._config.method?t:this._config.method,o=i===on?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map(function(t){var e,t=u.getSelectorFromElement(t);if(e=t?document.querySelector(t):e){var n=e.getBoundingClientRect();if(n.width||n.height)return[h(e)[i]().top+o,t]}return null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1])})},n.dispose=function(){h.removeData(this._element,Ve),h(this._scrollElement).off(Xe),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},n._getConfig=function(t){var e;return"string"!=typeof(t=r({},Ge,"object"==_typeof(t)&&t?t:{})).target&&((e=h(t.target).attr("id"))||(e=u.getUID(H),h(t.target).attr("id",e)),t.target="#"+e),u.typeCheckConfig(H,t,Je),t},n._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},n._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},n._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},n._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),n<=t){e=this._targets[this._targets.length-1];this._activeTarget!==e&&this._activate(e)}else if(this._activeTarget&&t<this._offsets[0]&&0<this._offsets[0])this._activeTarget=null,this._clear();else for(var i=this._offsets.length;i--;)this._activeTarget!==this._targets[i]&&t>=this._offsets[i]&&(void 0===this._offsets[i+1]||t<this._offsets[i+1])&&this._activate(this._targets[i])},n._activate=function(e){this._activeTarget=e,this._clear();var t=this._selector.split(",").map(function(t){return t+'[data-target="'+e+'"],'+t+'[href="'+e+'"]'}),t=h([].slice.call(document.querySelectorAll(t.join(","))));(t.hasClass("dropdown-item")?(t.closest(".woo-invoice-dropdown").find(".woo-invoice-dropdown-toggle").addClass($e),t):(t.addClass($e),t.parents(tn).prev(en+", "+nn).addClass($e),t.parents(tn).prev(".woo-invoice-nav-item").children(en))).addClass($e),h(this._scrollElement).trigger(Ze.ACTIVATE,{relatedTarget:e})},n._clear=function(){[].slice.call(document.querySelectorAll(this._selector)).filter(function(t){return t.classList.contains($e)}).forEach(function(t){return t.classList.remove($e)})},sn._jQueryInterface=function(e){return this.each(function(){var t=h(this).data(Ve);if(t||(t=new sn(this,"object"==_typeof(e)&&e),h(this).data(Ve,t)),"string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'+e+'"');t[e]()}})},e(sn,null,[{key:"VERSION",get:function(){return"4.2.1"}},{key:"Default",get:function(){return Ge}}]),sn);function sn(t,e){var n=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(e),this._selector=this._config.target+" "+en+","+this._config.target+" "+nn+","+this._config.target+" .woo-invoice-dropdown-item",this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,h(this._scrollElement).on(Ze.SCROLL,function(t){return n._process(t)}),this.refresh(),this._process()}h(window).on(Ze.LOAD_DATA_API,function(){for(var t=[].slice.call(document.querySelectorAll('[data-spy="scroll"]')),e=t.length;e--;){var n=h(t[e]);rn._jQueryInterface.call(n,n.data())}}),h.fn[H]=rn._jQueryInterface,h.fn[H].Constructor=rn,h.fn[H].noConflict=function(){return h.fn[H]=ze,rn._jQueryInterface};var an="bs.tab",a="."+an,ln=h.fn.tab,cn={HIDE:"hide"+a,HIDDEN:"hidden"+a,SHOW:"show"+a,SHOWN:"shown"+a,CLICK_DATA_API:"click"+a+".data-api"},hn="active",un=".active",fn="> li > .active",dn=((s=pn.prototype).show=function(){var t,e,n,i,o,r,s=this;this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&h(this._element).hasClass(hn)||h(this._element).hasClass("disabled")||(e=h(this._element).closest(".woo-invoice-nav, .list-group")[0],n=u.getSelectorFromElement(this._element),e&&(o="UL"===e.nodeName||"OL"===e.nodeName?fn:un,i=(i=h.makeArray(h(e).find(o)))[i.length-1]),o=h.Event(cn.HIDE,{relatedTarget:this._element}),r=h.Event(cn.SHOW,{relatedTarget:i}),i&&h(i).trigger(o),h(this._element).trigger(r),r.isDefaultPrevented())||o.isDefaultPrevented()||(n&&(t=document.querySelector(n)),this._activate(this._element,e),r=function(){var t=h.Event(cn.HIDDEN,{relatedTarget:s._element}),e=h.Event(cn.SHOWN,{relatedTarget:i});h(i).trigger(t),h(s._element).trigger(e)},t?this._activate(t,t.parentNode,r):r())},s.dispose=function(){h.removeData(this._element,an),this._element=null},s._activate=function(t,e,n){function i(){return o._transitionComplete(t,r,n)}var o=this,r=(!e||"UL"!==e.nodeName&&"OL"!==e.nodeName?h(e).children(un):h(e).find(fn))[0],e=n&&r&&h(r).hasClass("fade");r&&e?(e=u.getTransitionDurationFromElement(r),h(r).removeClass("show").one(u.TRANSITION_END,i).emulateTransitionEnd(e)):i()},s._transitionComplete=function(t,e,n){var i;e&&(h(e).removeClass(hn),(i=h(e.parentNode).find("> .woo-invoice-dropdown-menu .active")[0])&&h(i).removeClass(hn),"tab"===e.getAttribute("role"))&&e.setAttribute("aria-selected",!1),h(t).addClass(hn),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),u.reflow(t),h(t).addClass("show"),t.parentNode&&h(t.parentNode).hasClass("dropdown-menu")&&((i=h(t).closest(".woo-invoice-dropdown")[0])&&(e=[].slice.call(i.querySelectorAll(".woo-invoice-dropdown-toggle")),h(e).addClass(hn)),t.setAttribute("aria-expanded",!0)),n&&n()},pn._jQueryInterface=function(n){return this.each(function(){var t=h(this),e=t.data(an);if(e||(e=new pn(this),t.data(an,e)),"string"==typeof n){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n]()}})},e(pn,null,[{key:"VERSION",get:function(){return"4.2.1"}}]),pn);function pn(t){this._element=t}h(document).on(cn.CLICK_DATA_API,'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',function(t){t.preventDefault(),dn._jQueryInterface.call(h(this),"show")}),h.fn.tab=dn._jQueryInterface,h.fn.tab.Constructor=dn,h.fn.tab.noConflict=function(){return h.fn.tab=ln,dn._jQueryInterface};var mn="toast",gn="bs.toast",n="."+gn,_n=h.fn[mn],vn={CLICK_DISMISS:"click.dismiss"+n,HIDE:"hide"+n,HIDDEN:"hidden"+n,SHOW:"show"+n,SHOWN:"shown"+n},yn="show",En="showing",bn={animation:"boolean",autohide:"boolean",delay:"number"},wn={animation:!0,autohide:!0,delay:500},Tn=((a=Cn.prototype).show=function(){function t(){n._element.classList.remove(En),n._element.classList.add(yn),h(n._element).trigger(vn.SHOWN),n._config.autohide&&n.hide()}var e,n=this;h(this._element).trigger(vn.SHOW),this._config.animation&&this._element.classList.add("fade");this._element.classList.remove("hide"),this._element.classList.add(En),this._config.animation?(e=u.getTransitionDurationFromElement(this._element),h(this._element).one(u.TRANSITION_END,t).emulateTransitionEnd(e)):t()},a.hide=function(t){var e=this;this._element.classList.contains(yn)&&(h(this._element).trigger(vn.HIDE),t?this._close():this._timeout=setTimeout(function(){e._close()},this._config.delay))},a.dispose=function(){clearTimeout(this._timeout),this._timeout=null,this._element.classList.contains(yn)&&this._element.classList.remove(yn),h(this._element).off(vn.CLICK_DISMISS),h.removeData(this._element,gn),this._element=null,this._config=null},a._getConfig=function(t){return t=r({},wn,h(this._element).data(),"object"==_typeof(t)&&t?t:{}),u.typeCheckConfig(mn,t,this.constructor.DefaultType),t},a._setListeners=function(){var t=this;h(this._element).on(vn.CLICK_DISMISS,'[data-dismiss="toast"]',function(){return t.hide(!0)})},a._close=function(){function t(){n._element.classList.add("hide"),h(n._element).trigger(vn.HIDDEN)}var e,n=this;this._element.classList.remove(yn),this._config.animation?(e=u.getTransitionDurationFromElement(this._element),h(this._element).one(u.TRANSITION_END,t).emulateTransitionEnd(e)):t()},Cn._jQueryInterface=function(n){return this.each(function(){var t=h(this),e=t.data(gn);if(e||(e=new Cn(this,"object"==_typeof(n)&&n),t.data(gn,e)),"string"==typeof n){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n](this)}})},e(Cn,null,[{key:"VERSION",get:function(){return"4.2.1"}},{key:"DefaultType",get:function(){return bn}}]),Cn);function Cn(t,e){this._element=t,this._config=this._getConfig(e),this._timeout=null,this._setListeners()}if(h.fn[mn]=Tn._jQueryInterface,h.fn[mn].Constructor=Tn,h.fn[mn].noConflict=function(){return h.fn[mn]=_n,Tn._jQueryInterface},void 0===h)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");s=h.fn.jquery.split(" ")[0].split(".");if(s[0]<2&&s[1]<9||1===s[0]&&9===s[1]&&s[2]<1||4<=s[0])throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");t.Util=u,t.Alert=i,t.Button=V,t.Carousel=p,t.Collapse=ut,t.Dropdown=I,t.Modal=Ee,t.Popover=Qe,t.Scrollspy=rn,t.Tab=dn,t.Toast=Tn,t.Tooltip=P,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
